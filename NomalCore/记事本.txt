待办事项
一、
雪鹰领主
公会战播报设定
数据插入不进和代码优化





三：ro







go:反射，redis，remark（接口文档）








人员相关：

数值：张导

前端负责：黄涛










数据库：地址：10.1.0.10；用户名：root；密码：moqikaka3312；端口：3312；数据库：model_develop、player_develop
内网FTP：http://117.139.247.210:10012/
SVN地址：https://10.1.0.0/svn/xueyinglingzhu/trunk/Design
功能测试服：710977117@qq.com 710977118@qq.com 密码都是123qwe123
外网测试服：710977119@qq.com            123456




远程桌面地址：
1、雪鹰线上中心：gmo-axylz.moqikaka.com
2、雪鹰开发地址：10.1.0.16
3、ro开发地址：10.1.0.31
4、雪鹰黑桃线上中心：gmoht-xylz.moqikaka.com





游戏开发的博客：http://blog.csdn.net/y13156556538/article/details/64160656


b_system_c：系统配置表，不要复制
错误点：
1、类没有C方法，不需要类标记。
2、check方法里面，try catch 要抛出ex错误。（ex:ex.message）
3、在init中，如果没有数据，初始化数据，在getdata中，检测错误数据并重置。
4、B表不需要构造方法，只需要字段。
5、Play的数据，不在play构造方法中初始化，而是在int中，初始化并插入到数据库。
6、接口返回的值，不需要转为String，直接返回对象
7、getdata不能存在其重构或者任何其他包含 PlayerBLL.IfDataInited(player, mClassName, Init, null);的方法
8、check的时候，加一个表名，方便策划检查。
9、新功能，b表先到model_check数据库中，给策划check错误。
10、execel数据中，*是前后端都有，S是后端，C是前端
11、PlayerBll.ClearIntiFlag()方法容易出问题，尽量不要用。
12、先删除数据库，再删除内存
13、YesOrNoEnum枚举已经被抛弃
14、线程内部，在外面的try不会catch到错误，在内部要try catch记录错误日志


代码优化：
1、避免不必要的空行。
2、if层数尽量少。
3、避免不需要的判断。
4、判断的顺序，b为先。
5、equal换为==
6、注意没必要的new
7、日志需要尽可能详细。
8、注意方法名，方法的开放性，参数如果不需要重量级对象，则不要传。
9、字典缩写用dict
10、用事件，不修改原有代码
11、判断集合，尽量使用any（），在yeild情况下，count（）会致使加载所有数据。
12、try finally用于需要手动释放资源。确保释放。
13、ToLookUp，集合分组快于tolist

一些方法：
1、时间戳：DateTimeUtil.GetUnixTimeStamp(guildGiveApplyInfo.CrTime);
2、最小时间：WorldBLL.MinDateTime;
3、转换枚举：VerifyBLL.ConvertToEnumType<ConsumeTypeEnum>(typeId);
4、随机ITem：RandomUtil.GetRandItem(list.Where(w => w.DifficultyLv == diffLv).ToList())

更新几个p表规则：
1.如果PlayerId 与其他Id形成联合主键，则PlayerId需要在其他Id之前，排在表中的第一位（如：p_slot）
2.如果表中Id可以独立作为主键，则需要对PlayerId单独建立1个索引，（如：p_hero）


---------------------------------------------------发布版本--数据方面-----------------------------------------------------------------
数据库更新:
1.b表可以直接整表更新(b_system_c除外)
2.d,c,p,g开头的表都需要用脚本更新（增删字段等）
3.d表内容我们不能配置，需要运营配置（d_server_group_setting_c 表需要运维自行配制）
4.c表只能运维配置，我们只能增删字段，字段内容需要运维根据线上情况配置
5.g，p表我们可以自行设置对应的值，需要确保正确
6、对于发布脚本，各个功能模块各自提供给发布人员，需要确保脚本正确。
7、对于本地和线上不同的配置，单独提示出来，方便发布人员告知运维做对应调整
8、发布人员需要检查所有提交过来的脚本，看是否正确，是否违反规范

---------------------------------------------------GIT方面-----------------------------------------------------------------
GIT命令：
增加：git add .
提交：git commit -m ""
查看以前的提交日志：git log --pretty=oneline
查看以后的提交日志：git reflog --pretty=oneline
回滚到以前：git reset --head head~1
获取某个【ID】版本：git reset --head id
从版本库、缓存区的文件替换到工作区：git checkout -- test.txt
本地删除文件：rm text.txt
库中删除文件：git rm txt.txt 然后提交。
添加远程库关联：git remote add origin https://github.com/xq546247083/Test.git
获取远程分支到本地：git pull <远程库名> <远程分支名>:<本地分支名> 
提
交本地库到远程库：
git push -u origin master
git push <远程库名> <本地分支名>:<远程分支名>
克隆远程库到本地库：git clone git@github.com:xq546247083/TestTwo.git